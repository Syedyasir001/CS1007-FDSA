class DoublyNode:
    def __init__(self, data):
        self.data = data  
        self.next = None 
        self.prev = None 


class DoublyLinkedList:
    def __init__(self):
        self.head = None  

    
    def delete_node(self, data):
        
        current = self.head

        
        while current:
            if current.data == data:
                
                if current == self.head:
                    self.head = current.next
                    if self.head:  
                        self.head.prev = None

               
                else:
                    if current.next:
                        current.next.prev = current.prev
                    if current.prev:
                        current.prev.next = current.next

                
                current = None
                return

            
            current = current.next

        print("Node with data", data, "not found.")

   
    def traverse_backward(self):
       
        current = self.head
        if current is None:
            print("The list is empty.")
            return
        
       
        while current.next:
            current = current.next

      
        while current:
            print(current.data, end=" ")
            current = current.prev
        print()

    
    def append(self, data):
        new_node = DoublyNode(data)
        if self.head is None:
            self.head = new_node
        else:
            last = self.head
            while last.next:
                last = last.next
            last.next = new_node
            new_node.prev = last

if __name__ == "__main__":
   
    dll = DoublyLinkedList()
    dll.append(10)
    dll.append(20)
    dll.append(30)
    dll.append(40)
    
    print("List traversed backward:")
    dll.traverse_backward() 

    print("Deleting node with data 20")
    dll.delete_node(20)

    print("List after deletion:")
    dll.traverse_backward() 

    print("Deleting node with data 50")
    dll.delete_node(50)  
